<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
       		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
            
    <!-- <context:component-scan base-package="com.dminor">
        排除springmvc的扫描范围，由于子上下文会继承父上下文并覆盖，所以此处扫描controller无用，会被覆盖掉。浪费资源
        <context:exclude-filter type="annotation"
            expression="org.springframework.stereotype.Controller" />
    </context:component-scan> -->
    <context:component-scan base-package="com.dminor.baselib">
	</context:component-scan>
	<context:component-scan base-package="com.heros.doing.dao">
	</context:component-scan>
    <!-- 加载环境配置 -->
     <!-- 加载开发环境 -->
    <!-- <import resource="applicationContext-dev.xml" /> -->
    <!-- 加载正式环境 -->
    <!-- <import resource="applicationContext-production.xml" /> -->
    
    <!-- <import resource="classpath:quartz.xml" /> -->
    <!-- 加載dubbo配置文件 -->
    <!-- <import resource="classpath:consumer.xml" />
    <import resource="classpath:provider.xml" /> -->
    
       <!-- 装配通用数据库访问类BaseDAOImpl -->
	<bean id="dao" class="com.dminor.baselib.dao.Dao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

    <!--高效的序列化工具-->
    <!-- <bean id="protostuffSerializer" class="redis.clients.jedis.serializable.ProtostuffSerializer"/> -->

    <!-- Task部分已经包含在spring-context包中 -->
    <!-- 配置任务执行器,必须配置执行器和指定Async注解使用的执行器，不然即使注解Async也无法异步执行 -->
    <task:executor id="eventExecutor" pool-size="10" keep-alive="600" /> 
    <!-- 配置Async注解启用指定的执行器，另一属性scheduler可以指定scheduler注解使用的执行器 -->
    <task:annotation-driven executor="eventExecutor" />
	<!-- 配置数据源信息 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        destroy-method="close">
       <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="jdbcUrl">
            <value>jdbc:mysql://121.42.33.1:3306/doing?autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull</value>
        </property>
        <property name="user" value="doing" />
        <property name="password" value="zx415@#12" />
        <property name="minPoolSize" value="5" />
        <property name="maxPoolSize" value="10" />
        <property name="initialPoolSize" value="10" />
        <property name="maxIdleTime" value="60" />
    </bean>
    <!-- SessionFactory配置 -->
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <value>com.heros.doing.model</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <!-- 
                    <prop key="hibernate.show_sql">true</prop> 
                    <prop key="hibernate.hbm2ddl.auto">update</prop> -->
               
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
            </props>
        </property>
    </bean>
    
  <bean id="txManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"
                rollback-for="java.lang.Exception"  />
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true" proxy-target-class="false">
        <aop:pointcut id="txPointcut"
            expression="execution(* com.heros.doing.service.impl.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
    </aop:config>


	<tx:advice id="txAdvice1" transaction-manager="txManager1">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"
                rollback-for="java.lang.Exception"  />
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true" proxy-target-class="false">
        <aop:pointcut id="txPointcut1"
            expression="execution(* com.heros.doing.service.impl.*.*(..))" />
        <aop:advisor advice-ref="txAdvice1" pointcut-ref="txPointcut1" />
    </aop:config>
    
    <bean id="txManager1" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource"/>
  	</bean> 
  	
  	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property> 
	</bean>
</beans>